app:
  name: sample-app

replicaCount: 2

image:
  repository: nginx
  tag: latest
  pullPolicy: IfNotPresent

ports:
  http: 8080
  metrics: 8081

resources: {}

service:
  type: ClusterIP
  annotations: {}

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    labels: {}

podAnnotations: {}

livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: metrics
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: metrics
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 2
  failureThreshold: 6
  successThreshold: 1

nodeSelector: {}

tolerations: []

affinity: {}

autoscaling:
  enabled: false
  # When enabled, replicaCount is ignored; HPA controls scaling.
  minReplicas: 2
  maxReplicas: 5
  # Set at least one of the target utilization percentages below to create metrics entries.
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# KEDA (Event-driven autoscaling) - mutually exclusive with autoscaling.enabled
keda:
  enabled: true
  minReplicaCount: 2
  maxReplicaCount: 5
  pollingInterval: 30        # seconds between checks
  cooldownPeriod: 30         # seconds to wait before scaling down
  # Provide one or more triggers. Example Prometheus trigger below (disabled by default):
  triggers:
    - type: prometheus
      metadata:
        serverAddress: http://prometheus-operated.monitoring.svc:9090
        metricName: http_server_requests_seconds_count
        threshold: "10"   # scale when > 10 req/s
        query: rate(http_server_requests_seconds_count{application="sample-app"}[1m])
